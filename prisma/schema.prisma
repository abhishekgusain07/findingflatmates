generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id                Int      @id @default(autoincrement())
  created_time      DateTime @default(now())
  email             String   @unique
  first_name        String?
  last_name         String?
  gender            String?
  profile_image_url String?
  user_id           String   @unique
  subscription      String?
  profile_photo    String?
}

model payments {
  id               Int      @id @default(autoincrement())
  created_time     DateTime @default(now())
  stripe_id        String
  email            String
  amount           String
  payment_time     String
  payment_date     String
  currency         String
  user_id          String
  customer_details String
  payment_intent   String
}

model subscriptions {
  id                        Int      @id @default(autoincrement())
  created_time              DateTime @default(now())
  subscription_id           String
  stripe_user_id            String
  status                    String
  start_date                String
  end_date                  String?
  plan_id                   String
  default_payment_method_id String?
  email                     String
  user_id                   String
}

model subscriptions_plans {
  id           Int      @id @default(autoincrement())
  created_time DateTime @default(now())
  plan_id      String
  name         String
  description  String
  amount       String
  currency     String
  interval     String
}

model invoices {
  id              Int      @id @default(autoincrement())
  created_time    DateTime @default(now())
  invoice_id      String
  subscription_id String
  amount_paid     String
  amount_due      String?
  currency        String
  status          String
  email           String
  user_id         String?
}

model ads {
  id                Int        @id @default(autoincrement()) // Unique identifier for the ad
  user_id           String     // Reference to the user who created the ad
  title             String     // Title of the ad
  description       String     // Description of the ad
  location          String     // Location of the property
  photos            String[]   // Array of photo URLs
  price             Float      // Rent amount
  looking_for       String     // Looking for (e.g., "male", "female", "any")
  occupancy_type    String     // Type of occupancy (e.g., "shared", "single", etc.)
  features          features[] // Link to features
  amenities         amenities[] // Link to amenities
  preferences       preferences[] // Link to preferences
  created_at        DateTime   @default(now()) // Timestamp for when the ad was created
  updated_at        DateTime   @updatedAt // Timestamp for when the ad was last updated

  conversations conversations[]
}

model features {
  id      Int    @id @default(autoincrement()) // Unique identifier for the feature
  name    String // Name of the feature
  ad_id   Int    // Reference to the ad
  ad      ads    @relation(fields: [ad_id], references: [id]) // Link to the ads model
}

model amenities {
  id      Int    @id @default(autoincrement()) // Unique identifier for the amenity
  name    String // Name of the amenity
  ad_id   Int    // Reference to the ad
  ad      ads    @relation(fields: [ad_id], references: [id]) // Link to the ads model
}

model preferences {
  id      Int    @id @default(autoincrement()) // Unique identifier for the preference
  name    String // Name of the preference
  ad_id   Int    // Reference to the ad
  ad      ads    @relation(fields: [ad_id], references: [id]) // Link to the ads model
}

model conversations {
  id          String        @id // Unique identifier for the conversation
  ad_id       Int        // Reference to the ad
  user1_id    String     // ID of the first user
  user2_id    String     // ID of the second user
  created_at  DateTime   @default(now()) // Timestamp for when the conversation was created
  messages     messages[] // Link to messages
  ad          ads        @relation(fields: [ad_id], references: [id]) // Link to the ads model
}

model messages {
  id              String        @id // Unique identifier for the message
  conversation_id String        // Reference to the conversation
  sender_id       String     // ID of the user who sent the message
  content         String     // Content of the message
  created_at      DateTime   @default(now()) // Timestamp for when the message was sent
  conversation    conversations @relation(fields: [conversation_id], references: [id]) // Link to the conversations model
} 